{"version":3,"sources":["../ts/index.ts","../ts/physic/algorithms/Polygon2Helper.ts","../ts/math/Vector2.ts","../ts/util/Util.ts","../ts/math/Matrix2.ts"],"sourcesContent":["export * from './math/index';\n","import { Util } from \"../../util/Util\";\nimport { Vector2 } from \"../../util/Vector2\";\nimport { Polygon2 } from \"../boundingBox/Polygon2\";\n\ntype PolygonWinding = \"clockwise\" | \"counterclockwise\";\n\nexport class Polygon2Helper {\n  /**\n   * Test a polygon for convexity\n   */\n  static testConvex(polygon: Polygon2): boolean {\n    if (polygon.model.length <= 3) return true;\n\n    const winding = Polygon2Helper.findWinding(polygon);\n\n    for (let i = 0; i < polygon.model.length; i++) {\n      const a = Util.array.getItem(polygon.model, i - 1);\n      const b = Util.array.getItem(polygon.model, i);\n      const c = Util.array.getItem(polygon.model, i + 1);\n\n      const ba = a.subtract(b);\n      const bc = c.subtract(b);\n\n      if (!Polygon2Helper.isConvex(winding, ba.crossProduct(bc))) return false;\n    }\n    return true;\n  }\n\n  /**\n   * test a vertex for Convexity\n   */\n  static isConvex(windung: PolygonWinding, crossProduct: number) {\n    if (windung == \"clockwise\" && crossProduct >= 0) return true;\n    if (windung == \"counterclockwise\" && crossProduct <= 0) return true;\n    return false;\n  }\n\n  /**\n   * Returns the winding of an Polygon\n   */\n  static findWinding(polygon: Polygon2): PolygonWinding {\n    return this.findArea(polygon) < 0 ? \"clockwise\" : \"counterclockwise\";\n  }\n\n  static findArea(polygon: Polygon2): number {\n    let area = 0;\n    for (let i = 0; i < polygon.model.length; i++) {\n      const a = Util.array.getItem(polygon.model, i);\n      const b = Util.array.getItem(polygon.model, i + 1);\n\n      area += a.x * b.y;\n      area -= a.y * b.x;\n    }\n\n    return area / 2;\n  }\n\n  /**\n   * Translates a point and returns the new Position\n   */\n  static translatePoint(point: Vector2, center: Vector2, angle: number = 0): Vector2 {\n    return Util.rotateAroundCenter(center, point.add(center), angle);\n  }\n  static translatePoints(points: Vector2[], center: Vector2, angle: number = 0): Vector2[] {\n    const translated: Vector2[] = [];\n\n    points.forEach((point) => {\n      translated.push(Util.rotateAroundCenter(center, point.add(center), angle));\n    });\n\n    return translated;\n  }\n}\n","import { Util } from \"../util/Util\";\n\nexport class Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x?: number, y?: number) {\n    this.x = !x ? 0 : x;\n    this.y = !y ? 0 : y;\n  }\n\n  add(vec2: Vector2): Vector2 {\n    return new Vector2(this.x + vec2.x, this.y + vec2.y);\n  }\n\n  subtract(vec2: Vector2): Vector2 {\n    return new Vector2(this.x - vec2.x, this.y - vec2.y);\n  }\n\n  scale(scalar: number): Vector2 {\n    return new Vector2(this.x * scalar, this.y * scalar);\n  }\n\n  dotProduct(vec2: Vector2): number {\n    return this.x * vec2.x + this.y * vec2.y;\n  }\n\n  crossProduct(vec2: Vector2): number {\n    return this.x * vec2.y - vec2.x * this.y;\n  }\n\n  vectorTo(point: Vector2): Vector2 {\n    return new Vector2(Math.round(point.x - this.x), Math.round(point.y - this.y));\n  }\n\n  getNormal(): Vector2 {\n    return new Vector2(-this.y, this.x);\n  }\n\n  getMagnitude(): number {\n    return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n  }\n\n  angle(vec2: Vector2): number {\n    const angleBetween = Util.math.trigonomitry.arccos(\n      this.dotProduct(vec2) / (this.getMagnitude() * vec2.getMagnitude())\n    );\n    if (isNaN(angleBetween)) return 0;\n    return vec2.crossProduct(this) >= 0 ? angleBetween : -angleBetween;\n  }\n}\n","import { Camara } from \"../display/Camara\";\nimport { Polygon2Helper } from \"../physic/algorithms/Polygon2Helper\";\nimport { Polygon2 } from \"../physic/boundingBox/Polygon2\";\nimport { Vector2 } from \"../math/Vector2\";\n\nexport type staticPosition = \"center\";\n\nexport const Util = {\n  array: {\n    getItem<T>(arr: T[], index: number): T {\n      if (index < 0) index = arr.length - 1;\n\n      return arr[index % arr.length];\n    },\n    getLastItem<T>(arr: T[]): T {\n      return arr[-1];\n    },\n    getRandomItem<T>(arr: T[]): T {\n      const randomIndex = Math.floor(Math.random() * arr.length);\n      return arr[randomIndex];\n    },\n    removeItemAtIndex<T>(arr: T[], index: number): T {\n      if (index < 0 || index >= arr.length) throw new Error(`${index} is not Valid!`);\n\n      return arr.splice(index, 1)[0];\n    },\n    removeItem<T>(arr: T[], item: T): T | undefined {\n      if (!arr.includes(item)) return undefined;\n\n      return arr.splice(arr.indexOf(item), 1)[0];\n    },\n    sum(arr: number[]): number {\n      return arr.reduce((a, b) => (a += isNaN(b) ? 0 : b));\n    },\n    isEmpty<T>(arr: T[]): boolean {\n      return !arr || arr.length === 0;\n    },\n    copyOf<T>(arr: T[]): T[] {\n      return [...arr];\n    },\n    connectArrays<T>(arrays: T[]): T[] {\n      let connected: T[] = [];\n      for (let arr of arrays) {\n        connected = connected.concat(arr);\n      }\n      return connected;\n    },\n  },\n  map: {\n    copyOf<K, V>(map: Map<K, V>): Map<K, V> {\n      var newMap = new Map<K, V>();\n      for (let [key, value] of map.entries()) {\n        newMap.set(key, value);\n      }\n      return newMap;\n    },\n  },\n  math: {\n    random: {\n      between(start: number, end: number, num_decimals: number = 0): number {\n        return Util.math.round(Math.random() * (end - start) + start, num_decimals);\n      },\n      // Vorzeichen\n      mathSign(): number {\n        return Math.random() > 0.5 ? 1 : -1;\n      },\n    },\n    convert: {\n      DegToRad(degree: number) {\n        return (degree * Math.PI) / 180;\n      },\n      RadToDeg(rad: number) {\n        return (180 * rad) / Math.PI;\n      },\n      percent(percent: number | string, value: number = 1) {\n        if (typeof percent === \"string\") {\n          percent = parseFloat(percent);\n          if (isNaN(percent)) throw new Error(`${percent} contains no number`);\n        }\n\n        return (percent / 100) * value;\n      },\n    },\n    // uses degree instead of the Math. functions\n    trigonomitry: {\n      cos(degree: number): number {\n        // Math.cos uses radian not degree\n        return Math.cos(Util.math.convert.DegToRad(degree));\n      },\n      arccos(num: number): number {\n        return Util.math.convert.RadToDeg(Math.acos(num));\n      },\n    },\n    round(number: number, num_decimals: number = 0): number {\n      const factor = Math.pow(10, num_decimals);\n      return Math.round(number * factor) / factor;\n    },\n    floor(number: number, num_decimals: number = 0): number {\n      const factor = Math.pow(10, num_decimals);\n      return Math.floor(number * factor) / factor;\n    },\n    ceil(number: number, num_decimals: number = 0): number {\n      const factor = Math.pow(10, num_decimals);\n      return Math.ceil(number * factor) / factor;\n    },\n  },\n  shapes: {\n    circle: {\n      area(radius: number): number {\n        return Math.PI * Math.pow(radius, 2);\n      },\n      radius(volume: number): number {\n        return Math.sqrt(volume / Math.PI);\n      },\n    },\n    polygon: {\n      area(polygon: Polygon2): number {\n        return Polygon2Helper.findArea(polygon);\n      },\n    },\n  },\n  object: {\n    findClassName(clas: Object | Function): string {\n      return clas instanceof Function ? clas.name : clas.constructor.name;\n    },\n    findSuperClassName(clas: Object | Function): string {\n      return clas instanceof Function\n        ? Object.getPrototypeOf(clas).name\n        : Object.getPrototypeOf(Object.getPrototypeOf(clas)).constructor.name;\n    },\n    findClass(clas: Object | Function): Function {\n      return clas instanceof Function ? clas : Object.getPrototypeOf(clas).constructor;\n    },\n    findSuperClass(clas: Object | Function): Function {\n      // if can't access .constructor => Max superclass Found!\n      return clas instanceof Function\n        ? Object.getPrototypeOf(clas)\n        : Object.getPrototypeOf(Object.getPrototypeOf(clas)).constructor;\n    },\n    findAllClassNames(clas: Object | Function): string[] {\n      const superClasses: string[] = [];\n\n      let currentClass = this.findClass(clas);\n      while (currentClass.name != \"\") {\n        superClasses.push(currentClass.name);\n        currentClass = this.findSuperClass(currentClass);\n      }\n      return superClasses;\n    },\n    findAllClasses(clas: Object | Function): Function[] {\n      const superClasses: Function[] = [];\n\n      let currentClass = this.findClass(clas);\n      while (currentClass.name != \"\") {\n        superClasses.push(currentClass);\n        currentClass = this.findSuperClass(currentClass);\n      }\n\n      return superClasses;\n    },\n    findAllSuperClassNames(clas: Object | Function): string[] {\n      const superClasses: string[] = [];\n\n      let currentClass = this.findSuperClass(clas);\n      while (currentClass.name != \"\") {\n        superClasses.push(currentClass.name);\n        currentClass = this.findSuperClass(currentClass);\n      }\n      return superClasses;\n    },\n    findAllSuperClasses(clas: Object | Function): Function[] {\n      const superClasses: Function[] = [];\n\n      let currentClass = this.findSuperClass(clas);\n      while (currentClass.name != \"\") {\n        superClasses.push(currentClass);\n        currentClass = this.findSuperClass(currentClass);\n      }\n\n      return superClasses;\n    },\n  },\n  position: {\n    /** Returns the static Position of a point with a world Position */\n    worldPos_to_staticPos(worldPos: Vector2, camara: Camara): Vector2 {\n      const camaraOffset = camara.getOffset();\n      const camaraScale = camara.scaleValue;\n      const camaraPos = camara.pos;\n\n      const distance = worldPos.subtract(camaraPos).scale(camaraScale);\n\n      const staticPos = new Vector2(\n        Util.math.round(distance.x, 5),\n        Util.math.round(-distance.y, 5)\n      ).add(camaraOffset);\n\n      return staticPos;\n    },\n    /** Returns the world Position of a point with a static Position */\n    staticPos_to_worldPos(staticPos: Vector2, camara: Camara): Vector2 {\n      const camaraCenter = camara.getOffset();\n      const camaraScale = camara.scaleValue;\n\n      const distance = staticPos.subtract(camaraCenter).scale(1 / camaraScale);\n\n      const worldPos = camara.pos.add(\n        new Vector2(Util.math.round(distance.x, 5), Util.math.round(-distance.y, 5))\n      );\n      return worldPos;\n    },\n    convertStaticPosInValue(pos: staticPosition, camara: Camara): Vector2 {\n      switch (pos) {\n        case \"center\":\n          return camara.getOffset();\n        default:\n          console.warn(pos, \" has no case!\");\n          return new Vector2();\n      }\n    },\n    convertPercentInValue(canvas: Canvas, widthPercent: string, heightPercent: string): Vector2 {\n      return new Vector2(\n        Util.math.convert.percent(widthPercent, canvas.width),\n        Util.math.convert.percent(heightPercent, canvas.height)\n      );\n    },\n    convertWidthPercentInValue(canvas: Canvas, percent: string): number {\n      const number = (Number.parseFloat(percent) / 100) * canvas.width;\n      return isNaN(number) ? 0 : number;\n    },\n    convertHeightPercentInValue(canvas: Canvas, percent: string): number {\n      const number = (Number.parseFloat(percent) / 100) * canvas.height;\n      return isNaN(number) ? 0 : number;\n    },\n  },\n\n  toVector(angle: number, lenght: number): Vector2 {\n    const rad = Util.math.convert.DegToRad(angle);\n    return new Vector2(Math.sin(rad) * lenght, Math.cos(rad) * lenght);\n  },\n\n  findAngleLine(startPoint: Vector2, endPoint: Vector2): number {\n    const zeroDegreeVector = new Vector2(0, 1);\n    const vec = endPoint.subtract(startPoint);\n\n    const dot = zeroDegreeVector.dotProduct(vec);\n    const mag1 = zeroDegreeVector.getMagnitude();\n    const mag2 = vec.getMagnitude();\n\n    const angle = Util.math.trigonomitry.arccos(dot / (mag1 * mag2));\n\n    return endPoint.x < startPoint.x ? -angle : angle;\n  },\n\n  /**\n   * Returns the Hypothenuse of a Triangle\n   * @param side1 the lenght of the 1. side\n   * @param side2 the lenght of the 2. side\n   */\n  calcHypothenuse(side1: number, side2: number): number {\n    return Math.sqrt(Math.pow(side1, 2) + Math.pow(side2, 2));\n  },\n\n  /**\n   * Returns the distance between to Points\n   * @param point1\n   * @param point2\n   */\n  distance(point1: Vector2, point2: Vector2): number {\n    return Util.calcHypothenuse(point1.x - point2.x, point1.y - point2.y);\n  },\n\n  /**\n   * Returns the closest Point to the mainPoint\n   * @param mainPoint point from which the distance will be measured\n   * @param points collection of Points that will be tested\n   * @param exclude point(s) that will be excluded\n   */\n  closestPoint(mainPoint: Vector2, points: Vector2[], exclude?: Vector2 | Vector2[]): Vector2 {\n    let closest: Vector2 = new Vector2(Infinity, Infinity);\n    let closestDistance: number = Infinity;\n    points.forEach((point) => {\n      if (mainPoint == point) return;\n      if (exclude instanceof Vector2 && point == exclude) return;\n      if (exclude instanceof Array && exclude.includes(point)) return;\n\n      let distance = Util.distance(mainPoint, point);\n      if (!closest || !closestDistance || distance < closestDistance) {\n        closest = point;\n        closestDistance = distance;\n      }\n    });\n    return closest;\n  },\n\n  /**\n   * Returns the farthest Point to the mainPoint\n   * @param mainPoint point from which the distance will be measured\n   * @param points collection of Points that will be tested\n   * @param exclude point(s) that will be excluded\n   */\n  farthestPoint(mainPoint: Vector2, points: Vector2[], exclude?: Vector2 | Vector2[]): Vector2 {\n    let farthest: Vector2 = mainPoint;\n    let farthestDistance: number = 0;\n\n    points.forEach((point) => {\n      if (mainPoint == point) return;\n      if (exclude instanceof Vector2 && point == exclude) return;\n      if (exclude instanceof Array && exclude.includes(point)) return;\n\n      let distance = Util.distance(mainPoint, point);\n\n      if (distance >= farthestDistance) {\n        farthest = point;\n        farthestDistance = distance;\n      }\n    });\n\n    return farthest;\n  },\n\n  /**\n   * Moves @param distance in @param direction from the @param start Point and returns the new Position\n   * @param start point from which the movement starts\n   * @param direction angle in which the point will be moved\n   * @param distance amount by which the point will be moved\n   */\n  moveDirection(start: Vector2, direction: number, distance: number): Vector2 {\n    const rad = Util.math.convert.DegToRad(direction);\n    const moveX = Math.sin(rad) * distance;\n    const moveY = Math.cos(rad) * distance;\n\n    return new Vector2(start.x + moveX, start.y + moveY);\n  },\n\n  /**\n   * Rotates the @param point around a @param center Point by @param angle degrees\n   * @param center point which another point will rotate around\n   * @param point point that will be rotated\n   * @param angle angle by which the point will be rotated\n   */\n  rotateAroundCenter(center: Vector2, point: Vector2, angle: number): Vector2 {\n    const rad = Util.math.convert.DegToRad(angle);\n\n    return new Vector2(\n      Math.cos(rad) * (point.x - center.x) - Math.sin(rad) * (point.y - center.y) + center.x,\n      Math.sin(rad) * (point.x - center.x) + Math.cos(rad) * (point.y - center.y) + center.y\n    );\n  },\n};\n","import { Util } from \"../util/Util\";\n\nexport class Matrix2<T> {\n  private cells: Array<Array<T | string>>;\n\n  private xSize: number;\n  private ySize: number;\n\n  constructor(x: number, y: number) {\n    this.cells = [];\n\n    this.xSize = x;\n    this.ySize = y;\n\n    for (let i = 0; i < y; i++) {\n      let arr = [];\n      for (let j = 0; j < x; j++) {\n        arr.push(\"[]\");\n      }\n      this.cells.push(arr);\n    }\n  }\n\n  isCellEmpty(x: number, y: number): boolean {\n    return this.get(x, y) === \"[]\";\n  }\n\n  clearCell(x: number, y: number): void {\n    this.set(x, y, \"[]\");\n  }\n\n  get(x: number, y: number): T | string {\n    const yIndex = this.ySize - y - 1;\n\n    return Util.array.getItem(Util.array.getItem(this.cells, yIndex), x);\n  }\n\n  set(x: number, y: number, content: string | T): void {\n    if (x < 0 || x >= this.getSizeX()) {\n      console.warn(`${x} is out of Bounds!`);\n      return;\n    }\n    if (y < 0 || y >= this.getSizeY()) {\n      console.warn(`${y} is out of Bounds!`);\n      return;\n    }\n\n    const yIndex = this.ySize - y - 1;\n\n    this.cells[yIndex][x] = content;\n  }\n\n  getSizeX(): number {\n    return this.xSize;\n  }\n\n  getSizeY(): number {\n    return this.ySize;\n  }\n}\n"],"mappings":"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","names":[]}