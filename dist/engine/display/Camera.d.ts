import { Polygon2 } from "../physic/boundingBox/Polygon2.js";
import { ICollideable } from "../physic/property/ICollideable.js";
import { IMoveable } from "../physic/property/IMoveable.js";
import { Vector2 } from "../util/Vector2.js";
import { Canvas } from "./Canvas";
export declare class Camara implements ICollideable, IMoveable {
    private canvas;
    constructor(canvas: Canvas, pos?: Vector2);
    getOffset(): Vector2;
    hitBox: Polygon2;
    orientation: number;
    translatedPoints: Vector2[];
    alreadyTranslated: boolean;
    moveDirection(direction: number, distance: number): void;
    move(move: Vector2): void;
    isCollidingWith(other: ICollideable): boolean;
    translatePoints(): Vector2[];
    private lockScaling;
    private zoomFactor;
    private maxZoomInAmount;
    private maxZoomOutAmount;
    private scaleAmount;
    scaleValue: number;
    private mouseWheel;
    private zoomIn;
    private zoomOut;
    private updateScaleValue;
    setScale(scale: number): void;
    setMaxZoomInAmount(amount: number): void;
    setMaxZoomOutAmount(amount: number): void;
    setZoomingFactor(factor: number): void;
    setLockScaling(b: boolean): void;
    private lockMovement;
    pos: Vector2;
    private mouseMove;
    setLockMovement(b: boolean): void;
    private previousTouchPos;
    private touchMove;
}
