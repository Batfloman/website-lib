import { SceneObject } from "../objects/SceneObject";
import { Vector2 } from "../../util/Vector2";
import { IRenderable } from "../../display/IRenderable";
import { Renderer } from "../../display/Renderer";
import { Color } from "../../util/Color";
import { HitBox } from "../../physic/boundingBox/HitBox";
import { Chunk } from "./Chunk";
import { WorldObject } from "../objects/WorldObject";
import { Game } from "../../games/Game";
export declare class World implements IRenderable {
    protected game: Game;
    pos: Vector2;
    objects: SceneObject[];
    constructor(pos?: Vector2, backgroundColor?: Color);
    clicked(worldPos: Vector2): void;
    init(game: Game): void;
    isInsideWorld(point: Vector2): boolean;
    private backgroundColor;
    shouldRender(): boolean;
    render(renderer: Renderer): void;
    setBackground(color: Color): void;
    addObject(obj: SceneObject): void;
    removeObject(obj: SceneObject): SceneObject | undefined;
    findObjects<T extends SceneObject>(clas: string | Function, exclude?: T | T[]): T[];
    findObjectsInNeighbouringChunks<T extends WorldObject<HitBox>>(chunk: Chunk, clas: string | Function, exclude?: T | T[], distance?: number, rectStyle?: boolean): T[];
    private objectMap;
    private addToMap;
    private removeFromMap;
    private chunkSize;
    private chunks;
    putObjectsInCunks(): void;
    private addToChunks;
    private removeFromChunks;
    private addToChunk;
    findChunkOf(obj: WorldObject<HitBox>): Vector2;
    findChunkOfPos(pos: Vector2): Vector2;
    findNeighbourChunksOf(chunk: Chunk, distance?: number, rectangleStlye?: boolean): Chunk[];
    getChunk(x: number, y: number): Chunk | undefined;
    setChunkSize(size: number): void;
}
